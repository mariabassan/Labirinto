package labirinto;

import java.io.*;

public class Matriz {
	
	public void Valida(String labirinto) throws Exception 
	{
		int Linhas = 0;
		int Colunas = 0;
		int aux = 0;
		int aux2 = 2;
		int entradas = 0;
		int saidas = 0;
		Object[][] vetLabirinto = null;
		int index = 0;
		int indice = 0;
		
		BufferedReader reader = new BufferedReader(new FileReader(labirinto));
		
		String linha;
		
		linha = reader.readLine();
		
		try {
			Linhas = Integer.parseInt(linha);
		}
		catch (Exception e) {
			throw new Exception("Número de linhas não encontrado, por favor verifique e tente novamente.");
		}
		
		while ((linha=reader.readLine()) != null) {
		
			if(aux == 0)
				Colunas = linha.length();
			
			if(Colunas!=linha.length())
				throw new Exception ("Erro no arquivo.");
			
			if(linha.contains("E"))
				entradas++;
			
			if(linha.contains("S"))
				saidas++;
			
			if (aux2 == 2)
				vetLabirinto = new Object[Linhas][Colunas];
			
			if(indice>0 && indice<Linhas-1)
			{
				int pos =linha.indexOf('E');
				if(pos!=0 && pos!=Colunas-1 && pos!=-1) {
					throw new Exception ("Apenas entradas pelas bordas são válidas!");
				}
				
				int pos1=linha.indexOf('S');
				if(pos1!=0 && pos1!=Colunas-1 && pos1!=-1) {
					throw new Exception ("Apenas saídas pelas bordas são válidas!");
				}
			}
			
			if(indice>0 && indice<Linhas-1)
			{
				int posicao = linha.indexOf(' ');
				int posicao2 = linha.lastIndexOf(' ');
				
				if(posicao == 0 && posicao2 != -1)
					throw new Exception ("Nao pode ter espaços na borda");
				
				if(posicao2 == Colunas-1 && posicao != -1)
					throw new Exception ("Nao pode ter espaços na borda");	
			}
			else if (linha.indexOf(' ')!= -1)
					throw new Exception ("Nao pode ter espaços na borda");
			
			index = 0;
			aux2 = 99;
			
			int qtdInicio, qtdAtual;

			for(int y=0;y<Colunas;y++)
            {
               if(y > 1){
                    qtdAtual = 0;
                  }
               for(Colunas = 0; Colunas < labirinto.length(); Colunas++)
               {
                  if(y == 1){
                  	qtdInicio++;
                  }
                  if(y > 1){
                     qtdAtual++;
                  }

				  vetLabirinto[indice][y] = linha.charAt(index);
               }
               if(y > 1 && qtdAtual != qtdInicio){
                  throw new Exception("\nO arquivo possui linhas de tamanhos diferentes, por favor, corrija e tente novamente.");
               }
            }

			indice++;
			aux=99;
		}
		
		if (entradas>1)
			throw new Exception("Labirinto inválido. É permitido no máximo uma entrada ('E').");
		if (saidas>1)
			throw new Exception("Labirinto inválido. É permitido no máximo uma saída ('S').");
		if (entradas<=0)
			throw new Exception("O labirinto não possui caracter de entrada ('E'), por favor corrija e tente novamente.");
		if (saidas<=0)
			throw new Exception("O labirinto não possui caracter de saída('S'), por favor corrija e tente novamente.");
		
		/*for(int i = 0; i < Linhas; i++)
		{
			for(int j = 0; j < Colunas; j++)
			{
				System.out.print(vetLabirinto[i][j]);
			}
			System.out.print("\n");
		}*/
		
		Coordenada ultimaCoord = new Coordenada(0,0);
		Percorrer andar = new Percorrer();
		ultimaCoord = andar.andar(Linhas,Colunas,vetLabirinto);
		
		if(vetLabirinto[ultimaCoord.getX()][ultimaCoord.getY()].equals('S'))
			System.out.println("Ufa, encontramos a saída!!!");
	}
}

